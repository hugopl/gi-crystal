module <%= namespace_name %>
  <% render_doc(object) -%>
  class <%= type_name %>
    <% if object.copyable? %>
      @data : <%= to_lib_type(object) %>
    <% else %>
      @pointer : Pointer(Void)
    <% end %>

    def initialize(pointer : Pointer(Void), transfer : GICrystal::Transfer)
      raise ArgumentError.new("Tried to generate struct with a NULL pointer") if pointer.null?

      <% if object.boxed? %>
        @pointer = if transfer.none?
                     LibGObject.g_boxed_copy(<%= to_crystal_type(object, false) %>.g_type, pointer)
                   else
                     pointer
                   end
      <% elsif object.copyable? %>
        # Raw structs are always moved to Crystal memory.
        @data = pointer.as(Pointer(<%= to_lib_type(object) %>)).value
        LibGLib.g_free(pointer) if transfer.full?
      <% else %>
        @pointer = pointer
      <% end %>
    end

    <% if object.copyable? %>
      <%= struct_new_method %>
    <% end %>

    <% if !object.copyable? %>
      # :nodoc:
      # Code copied from crystal/src/weak_ref.cr
      # Allocates this object using malloc_atomic, allowing the GC to run more efficiently.
      # As GObjects memory is managed using reference counting, we do not need to scan its pointers.
      def self.allocate
        ptr = GC.malloc_atomic(instance_sizeof(self)).as(self)
        set_crystal_type_id(ptr)
        ptr
      end
    <% end %>

    <% if object.boxed? %>
    def finalize
      LibGObject.g_boxed_free(<%= type_name %>.g_type, self)
    end
    <% end %>

    def ==(other : self) : Bool
      LibC.memcmp(self, other.to_unsafe, sizeof(<%= to_lib_type(object) %>)).zero?
    end

    <% if object.copyable? %>
      <% foreach_field do |field| %>
        <% generate_getter(io, field) -%>
        <% generate_setter(io, field) -%>
      <% end %>
    <% end %>

    <% render "ecr/g_type_method.ecr" %>
    <% render_methods %>

    def to_unsafe
      <% if object.copyable? %>
        pointerof(@data).as(Void*)
      <% else %>
        @pointer
      <% end %>
    end
  end
end
